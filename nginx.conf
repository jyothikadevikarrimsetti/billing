server {
    listen 443 ssl;
    server_name ec2-65-2-153-213.ap-south-1.compute.amazonaws.com;

    ssl_certificate /etc/nginx/certs/self-signed.crt;
    ssl_certificate_key /etc/nginx/certs/self-signed.key;

    # Enable TLS versions and set strong ciphers
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    root /usr/share/nginx/html;
    index index.html;

    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri /index.html;
        #add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
    }

    location /api/ {
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "https://ec2-65-2-153-213.ap-south-1.compute.amazonaws.com" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization" always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204; # No content, just CORS headers
        }
        #Use backend container name inside Docker, else use localhost for external access
        proxy_pass http://backend:8080; #This will work inside Docker containers
        #For local dev, switch to localhost (you can set this dynamically using env vars)
    
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization; #Pass JWT tocken

        #Add the required CORS Headers
        # add_header Access-Control-Allow-Origin "http://localhost";
        add_header Access-Control-Allow-Origin "https://ec2-65-2-153-213.ap-south-1.compute.amazonaws.com" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization" always;
        add_header Access-Control-Allow-Credentials true always;
   
   
    }
}
# Redirect all HTTP traffic to HTTPS
server {
    listen 80;
    server_name ec2-65-2-153-213.ap-south-1.compute.amazonaws.com;
    return 301 https://$host$request_uri;
}