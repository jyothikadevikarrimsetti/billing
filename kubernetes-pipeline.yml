trigger:
- main

variables:
  # Docker hub images
  frontendImage: 'jyothika2832/billing-backend:latest'
  backendImage: 'jyothika2832/billing-frontend:latest'
  mysqlImage: 'mysql:5.7'
  # Azure resources
  azureSubscription: 'azure-resource-manager-service-connection'
  resourceGroup: 'practise-rg'
  aksCluster: 'my-aks-cluster'
  location: 'eastus'
  namespace: 'production'
  nodeCount: 2
  vmSize: 'Standard_B2s'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Provision_AKS  # Fixed stage name (was Provision_Aks)
    displayName: 'Provision AKS Cluster'
    jobs:
      - job: Create_Cluster
        steps:
        - task: AzureCLI@2
          displayName: 'Create Resource Group'
          inputs:
            azureSubscription: $(azureSubscription)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az group create \
                --name $(resourceGroup) \
                --location $(location)
        - task: AzureCLI@2
          displayName: 'Create AKS Cluster'  # Fixed (was AWS Cluster)
          inputs:
            azureSubscription: $(azureSubscription)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az aks create \
                --resource-group $(resourceGroup) \
                --name $(aksCluster) \
                --node-count $(nodeCount) \
                --node-vm-size $(vmSize) \
                --enable-addons monitoring \
                --generate-ssh-keys \
                --location $(location)
              
              # Store credentials for next stage
              az aks get-credentials \
                --resource-group $(resourceGroup) \
                --name $(aksCluster) \
                --overwrite-existing \
                --file $(Pipeline.Workspace)/kubeconfig

  - stage: Deploy_Application
    displayName: 'Deploy Application'
    dependsOn: Provision_AKS  # Must match the stage name exactly
    jobs:
    - job: Deploy
      steps:
        # Install kubectl
        - task: KubectlInstaller@0
          displayName: 'Install kubectl'

        # Configure kubectl
        - task: Bash@3
          displayName: 'Configure kubectl'
          inputs:
            targetType: 'inline'
            script: |
              mkdir -p ~/.kube
              cp $(Pipeline.Workspace)/kubeconfig ~/.kube/config
              kubectl config current-context
        
        # Create namespace
        - task: Kubernetes@1
          displayName: 'Create Namespace'
          inputs:
            command: 'apply'
            useConfigurationFile: true
            configuration: |
              apiVersion: v1
              kind: Namespace  # Fixed (was NameSpace)
              metadata:
                name: $(namespace)
        
        # Create MySQL secrets
        - task: Kubernetes@1
          displayName: 'Create MySQL secrets'
          inputs:
            command: 'apply'
            useConfigurationFile: true
            configuration: |
              apiVersion: v1
              kind: Secret
              metadata:
                name: mysql-secrets
                namespace: $(namespace)
              type: Opaque
              data:
                root-password: $(echo -n 'your-root-password' | base64)
                username: $(echo -n 'your-db-user' | base64)
                password: $(echo -n 'your-db-password' | base64)

        # Deploy MySQL
        - task: KubernetesManifest@1
          displayName: 'Deploy MySQL'
          inputs:
            action: 'deploy'
            namespace: $(namespace)
            manifests: |
              $(Pipeline.Workspace)/manifests/mysql-deployment.yaml  # Fixed (was mainfests)
              $(Pipeline.Workspace)/manifests/mysql-service.yaml

        # Wait for MySQL to be ready
        - task: Bash@3
          displayName: 'Wait for MySQL'
          inputs:
            targetType: 'inline'
            script: |
              kubectl wait --namespace $(namespace) --for=condition=ready pod -l app=mysql --timeout=300s

        # Deploy Spring Boot backend
        - task: KubernetesManifest@1
          displayName: 'Deploy Backend'
          inputs:
            action: 'deploy'
            namespace: $(namespace)
            manifests: |
              $(Pipeline.Workspace)/manifests/backend-deployment.yaml  # Fixed (was frontend)
              $(Pipeline.Workspace)/manifests/backend-service.yaml

        # Deploy Angular frontend
        - task: KubernetesManifest@1
          displayName: 'Deploy Frontend'
          inputs:
            action: 'deploy'
            namespace: $(namespace)
            manifests: |
              $(Pipeline.Workspace)/manifests/frontend-deployment.yaml
              $(Pipeline.Workspace)/manifests/frontend-service.yaml

        # Get frontend service URL
        - task: Bash@3
          displayName: 'Get Frontend URL'
          inputs:
            targetType: 'inline'
            script: |
              echo "##vso[task.setvariable variable=frontendUrl]http://$(kubectl get svc frontend -n $(namespace) -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"  # Fixed (was ingreass)
              echo "Access your application at: http://$(kubectl get svc frontend -n $(namespace) -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
